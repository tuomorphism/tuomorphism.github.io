name: Export content to site from project repositories

on:
  schedule:
    - cron: '30 0 * * *'   # 00:30 UTC nightly
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: content-export
  cancel-in-progress: false

jobs:
  export:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute vars
        id: vars
        run: |
          ts="$(date -u +'%Y%m%dT%H%M%SZ')"
          echo "TS=$ts" >> "$GITHUB_ENV"
          echo "BRANCH_NAME=chore/content-auto" >> "$GITHUB_ENV"
          echo "PR_TITLE=Content: nightly export ${ts}" >> "$GITHUB_ENV"

      - name: Detect existing open PR for content branch
        id: detect_pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          git fetch origin --prune
          # Does an open PR from BRANCH_NAME -> main exist?
          open_pr="$(gh pr list \
            --base main \
            --head "$BRANCH_NAME" \
            --state open \
            --json number \
            --jq '.[0].number' || true)"
          if [ -n "${open_pr:-}" ]; then
            echo "OPEN_PR_NUMBER=$open_pr" >> "$GITHUB_ENV"
            echo "PR_OPEN=true" >> "$GITHUB_ENV"
          else
            echo "PR_OPEN=false" >> "$GITHUB_ENV"
          fi

      - name: Prepare branch
        run: |
          set -euo pipefail
          if [ "${PR_OPEN}" = "true" ]; then
            echo "Open PR exists (#${OPEN_PR_NUMBER}); reusing branch ${BRANCH_NAME}."
            # Ensure local branch tracks the remote and is up to date
            git fetch origin "$BRANCH_NAME:$BRANCH_NAME"
            git checkout "$BRANCH_NAME"
            # Optionally bring in latest main to minimize future merge conflicts
            git fetch origin main
            git merge --no-edit --strategy-option theirs origin/main || true
          else
            echo "No open PR; recreating ${BRANCH_NAME} from origin/main."
            git fetch origin --prune
            git checkout -B "$BRANCH_NAME" origin/main
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build exporter image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: tools/Dockerfile.exporter
          load: true
          tags: content-export:local
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run exporter (container as host UID/GID)
        run: |
          uid="$(id -u)"; gid="$(id -g)"
          docker run --rm \
            -u "${uid}:${gid}" \
            -e HOME=/tmp \
            -e EXTERNAL_GIT_PAT="${{ secrets.EXTERNAL_GIT_PAT }}" \
            -v "${{ github.workspace }}:/site" \
            --entrypoint bash \
            content-export:local \
            -lc '
              if [ -n "$EXTERNAL_GIT_PAT" ]; then
                git config --global url."https://$EXTERNAL_GIT_PAT:@github.com/".insteadOf "https://github.com/"
              fi
              umask 002
              python tools/export_all.py
            '

      - name: Show diff (debug)
        run: |
          echo "== git status =="
          git status --porcelain
          echo "== name-only diff vs HEAD =="
          git diff --name-only

      - name: Commit & push changes
        id: commit
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A src/content
          changed=false
          if ! git diff --staged --quiet; then
            git commit -m "chore(content): nightly export $TS"
            # If the branch did not exist remotely (new PR case), this sets upstream. If it did, just updates it.
            git push -u origin "$BRANCH_NAME"
            changed=true
          else
            echo "No new changes this run."
          fi
          echo "changed=${changed}" >> "$GITHUB_OUTPUT"

      - name: Ensure PR exists / update (gh)
        if: steps.commit.outputs.changed == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          if [ "${PR_OPEN}" = "true" ]; then
            echo "PR already open (#${OPEN_PR_NUMBER}); updating title."
            gh pr edit "${OPEN_PR_NUMBER}" --title "$PR_TITLE"
          else
            echo "Creating new PR from ${BRANCH_NAME} -> main."
            gh pr create \
              --base main \
              --head "$BRANCH_NAME" \
              --title "$PR_TITLE" \
              --body  "Automated nightly export of blog/projects content."
          fi
