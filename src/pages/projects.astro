---
import Layout from '~/layouts/PageLayout.astro';
import Header from '~/components/widgets/Header.astro';
import { getCollection } from 'astro:content';
import { headerData } from '~/navigation';
import Hero from '~/components/widgets/Hero.astro';

const projects = await getCollection('projects');
const ordered = [...projects].sort((a, b) => {
  if (a.data.tier !== b.data.tier) return a.data.tier - b.data.tier;
  return a.data.title.localeCompare(b.data.title);
});

const metadata = {
  title: 'Projects'
}

---

<Layout metadata={metadata}>
  <Fragment slot="header"></Fragment>
  <Header {...headerData} isSticky showToggleTheme />

  <Hero
    title="Projects"
    subtitle="Implementations and architectures in math, statistics, and software."
    size="sm"
    align="left"
    maxW="max-w-5xl"
    showDivider={true}
  />

  <!-- Project grid with consistent section spacing -->
  <section>
    <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-8 sm:py-12">
      <div class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
        {ordered.map((p, idx) => (
          <article class="flex flex-col rounded-s border border-zinc-200 dark:border-zinc-700 bg-white dark:bg-zinc-800 shadow-sm hover:shadow-md transition-shadow">
            {p.data.image && (
              <img
                src={p.data.image}
                alt={p.data.title}
                class="hidden sm:block h-40 w-full object-cover rounded-t-xl"
              />
            )}

            <div class="flex flex-col flex-1 p-5">
              <h3 class="text-base sm:text-lg font-semibold text-zinc-900 dark:text-white">
                {p.data.title}
              </h3>
              <p class="mt-1 text-sm text-zinc-600 dark:text-zinc-300">
                {p.data.description}
              </p>

              <div class="mt-auto pt-3 flex gap-3 flex-wrap">
                {p.data.links?.map((link) => (
                  <a href={link.url} class="text-sm font-medium text-indigo-600 hover:underline">
                    {link.label}
                  </a>
                ))}
              </div>

              {p.data.blog_posts && p.data.blog_posts.length > 0 && (
                <div class="mt-3">
                  <input type="checkbox" id={`blog-toggle-${idx}`} class="peer hidden" />
                  <label for={`blog-toggle-${idx}`} class="text-sm font-medium text-indigo-600 hover:underline cursor-pointer">
                    {`Show related blog posts (${p.data.blog_posts.length})`}
                  </label>
                  <div class="max-h-0 overflow-hidden peer-checked:max-h-screen transition-all duration-300 mt-1 space-y-1">
                    {p.data.blog_posts.map((bp) => (
                      <a href={bp.url} class="block text-sm text-zinc-700 dark:text-zinc-300 hover:underline">
                        {bp.title}
                      </a>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </article>
        ))}
      </div>
    </div>
  </section>
</Layout>
