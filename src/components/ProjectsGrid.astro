---
// src/components/ProjectsGrid.astro
// Works with Astro Content Collections (src/content/projects) or a manual array.
// Usage with content collections is shown below.

import type { CollectionEntry } from 'astro:content';

export interface ProjectItem {
  title: string;
  url?: string;   // external link (fallback if no internal page)
  slug?: string;  // internal route like "/projects/<slug>"
  cover: string;  // image path or URL
  summary?: string;
  badges?: string[]; // optional small pills (e.g., link labels)
  tier: 1 | 2 | 3;
  date?: Date | string;
}

interface Props {
  projects?: ProjectItem[];
  entries?: CollectionEntry<'projects'>[]; // from astro:content
}

const { projects = [], entries = [] } = Astro.props as Props;

const mapEntries = (es: CollectionEntry<'projects'>[]): ProjectItem[] =>
  es.map((e) => ({
    title: e.data.title,
    // Prefer internal project page if it exists; fall back to the first external link
    slug: `/projects/${e.slug}`,
    url: e.data.links?.[0]?.url,
    cover: e.data.image ?? '/images/project-placeholder.jpg',
    summary: e.data.description,
    badges: e.data.links?.slice(0, 3).map((l) => l.label),
    tier: (e.data.tier as 1 | 2 | 3) ?? 2,
    date: e.data.date ?? undefined,
  }));

const items: ProjectItem[] = [
  ...mapEntries(entries),
  ...projects,
];

// Sort: tier ASC (1 is most important), then date DESC if available, then title
const ordered = [...items].sort((a, b) => {
  if (a.tier !== b.tier) return a.tier - b.tier;
  const da = a.date ? new Date(a.date as any).getTime() : 0;
  const db = b.date ? new Date(b.date as any).getTime() : 0;
  if (db !== da) return db - da;
  return a.title.localeCompare(b.title);
});

// Helper to map tiers to layout classes
const tierClass = (tier: 1 | 2 | 3) => {
  switch (tier) {
    case 1:
      return (
        // Big feature cards
        "lg:col-span-4 lg:row-span-2 aspect-[16/10] sm:aspect-[16/9]"
      );
    case 2:
      return (
        // Mid-size cards
        "lg:col-span-3 lg:row-span-1 aspect-[16/10] sm:aspect-[4/3]"
      );
    default:
      return (
        // Small cards
        "lg:col-span-2 aspect-square sm:aspect-[4/3]"
      );
  }
};

const linkFor = (p: ProjectItem) => p.slug ?? p.url ?? '#';
---
<section aria-labelledby="projects-heading" class="relative">
  <div class="mb-6 flex items-end justify-between gap-4">
    <h2 id="projects-heading" class="text-2xl/tight sm:text-3xl font-semibold tracking-tight">
      Projects
    </h2>
  </div>
  <div class="flex justify-center">
  <div class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3 justify-items-center">
    {ordered.map((p) => (
      <article
        class={`group relative isolate overflow-hidden rounded-2xl ring-1 ring-zinc-200/60 dark:ring-zinc-700/50 shadow-sm hover:shadow-md transition-shadow ${tierClass(p.tier)}`}
      >
        <a href={linkFor(p)} class="absolute inset-0 z-10" aria-label={`${p.title} â€” open project`}></a>

        <!-- Cover Image -->
        <div class="absolute inset-0">
          <img
            src={p.cover}
            alt={p.title}
            loading="lazy"
            class="h-full w-full object-cover"
          />
          
          <!-- Gradient overlays to keep text readable -->
          <div class="pointer-events-none absolute inset-0 bg-gradient-to-t from-black/55 via-black/20 to-transparent opacity-90"></div>
          <div class="pointer-events-none absolute inset-0 ring-1 ring-inset ring-black/5"></div>
        </div>

        <!-- Content -->
        <div class="relative z-10 flex h-full flex-col justify-end p-4 sm:p-5 md:p-6">
          <div class="flex items-center gap-2">
            {p.badges && p.badges.map((t) => (
              <span class="rounded-full border border-white/25 bg-white/10 px-2 py-1 text-[11px] font-medium text-white/90 backdrop-blur-sm">
                {t}
              </span>
            ))}
          </div>

          <h3 class="mt-2 text-white font-semibold text-lg sm:text-xl">
            <span class="[text-shadow:_0_1px_2px_rgb(0_0_0_/_50%)]">{p.title}</span>
          </h3>

          {p.summary && (
            <p class="mt-1 hidden text-white/90 text-sm leading-snug line-clamp-3 sm:line-clamp-2 md:block">
              {p.summary}
            </p>
          )}

          <div class="mt-3 flex items-center gap-2 text-white/90">
            <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="transition-transform group-hover:translate-x-0.5">
              <path d="M5 12h14"/><path d="m12 5 7 7-7 7"/>
            </svg>
            <span class="text-sm font-medium">View project</span>
          </div>
        </div>

        {p.tier === 1 && (
          <div class="absolute inset-0 rounded-2xl ring-2 ring-indigo-400/80 dark:ring-indigo-300/70 pointer-events-none"></div>
        )}

        <span class="absolute inset-0 rounded-2xl ring-2 ring-offset-2 ring-offset-transparent ring-indigo-400/80 opacity-0 focus-within:opacity-100"></span>
      </article>
    ))}
  </div>
  </div>
</section>
