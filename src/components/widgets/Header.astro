---
import { Icon } from 'astro-icon/components';
import Logo from '~/components/Logo.astro';
import ToggleMenu from '~/components/common/ToggleMenu.astro';
import Button from '~/components/ui/Button.astro';

import { getHomePermalink } from '~/utils/permalinks';
import { trimSlash } from '~/utils/permalinks';
import type { CallToAction } from '~/types';

interface Link {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
}
interface MenuLink extends Link {
  links?: Array<MenuLink>;
}

export interface Props {
  id?: string;
  links?: Array<MenuLink>;
  actions?: Array<CallToAction>;
  isSticky?: boolean;
  isDark?: boolean;
  isFullWidth?: boolean;
  showToggleTheme?: boolean;
  showRssFeed?: boolean;
  position?: string;
}

const {
  id = 'header',
  links = [],
  actions = [],
  isSticky = false,
  isDark = false,
  isFullWidth = false,
  showToggleTheme = false,
  showRssFeed = false,
  position = 'center',
} = Astro.props;

// Current path like "/blog" or "/blog/post-slug"
const currentPath = '/' + trimSlash(Astro.url.pathname);

// Active matcher: exact or descendant path
const isActive = (href?: string) => {
  if (!href) return false;
  const h = '/' + trimSlash(href);
  return currentPath === h || currentPath.startsWith(h + '/');
};
---

<header
  class:list={[
    { sticky: isSticky, relative: !isSticky, dark: isDark },
    'top-0 z-40 flex-none mx-auto w-full border-b border-gray-50/0 transition-[opacity] ease-in-out',
  ]}
  {...(isSticky ? { 'data-aw-sticky-header': true } : {})}
  {...(id ? { id } : {})}
>
  <div class="absolute inset-0"></div>

  <div
    class:list={[
      'relative text-default py-3 px-3 md:px-6 mx-auto w-full',
      { 'md:flex md:justify-between': position !== 'center' },
      { 'md:grid md:grid-cols-3 md:items-center': position === 'center' },
      { 'max-w-7xl': !isFullWidth },
    ]}
  >
    <div class:list={[{ 'mr-auto rtl:mr-0 rtl:ml-auto': position === 'right' }, 'flex justify-between']}>
      <a class="flex items-center" href={getHomePermalink()}>
        <Logo />
      </a>
      <div class="flex items-center md:hidden">
        <ToggleMenu />
      </div>
    </div>

    <nav
      class="aw-nav items-center w-full md:w-auto hidden md:flex md:mx-5 text-default overflow-y-auto overflow-x-hidden md:overflow-y-visible md:overflow-x-auto md:justify-self-center"
      aria-label="Main navigation"
    >
      <ul class="flex flex-col md:flex-row md:self-center w-full md:w-auto text-xl md:text-[0.9375rem] tracking-[0.01rem] font-medium md:justify-center">
        {
          links.map(({ text, href, links }) => (
            <li class={links?.length ? 'dropdown' : ''}>
              {links?.length ? (
                <>
                  {/* Parent button highlighted if any child is active */}
                  <button
                    type="button"
                    class:list={[
                      'relative hover:text-link dark:hover:text-white px-4 py-3 flex items-center whitespace-nowrap transition-colors',
                      { 'aw-link-active text-link font-semibold': links?.some((l) => isActive(l.href)) },
                    ]}
                    aria-haspopup="true"
                    aria-expanded="false"
                  >
                    {text}
                    <Icon name="tabler:chevron-down" class="w-3.5 h-3.5 ml-0.5 rtl:ml-0 rtl:mr-0.5 hidden md:inline" />
                  </button>

                  <ul class="dropdown-menu md:backdrop-blur-md dark:md:bg-dark rounded md:absolute pl-4 md:pl-0 md:hidden font-medium md:bg-white/90 md:min-w-[200px] drop-shadow-xl">
                    {links.map(({ text: text2, href: href2 }) => (
                      <li>
                        <a
                          class:list={[
                            'first:rounded-t last:rounded-b md:hover:bg-gray-100 hover:text-link dark:hover:text-white dark:hover:bg-gray-700 py-2 px-5 block whitespace-no-wrap transition-colors',
                            { 'text-link font-semibold': isActive(href2) }, // child active style
                          ]}
                          href={href2}
                          {...(isActive(href2) ? { 'aria-current': 'page' } : {})}
                        >
                          {text2}
                        </a>
                      </li>
                    ))}
                  </ul>
                </>
              ) : (
                <a
                  class:list={[
                    'relative hover:text-link dark:hover:text-white px-4 py-3 flex items-center whitespace-nowrap transition-colors',
                    { 'aw-link-active text-link font-semibold': isActive(href) },
                  ]}
                  href={href}
                  {...(isActive(href) ? { 'aria-current': 'page' } : {})}
                >
                  {text}
                </a>
              )}
            </li>
          ))
        }
      </ul>
    </nav>

    <div
      class:list={[
        { 'ml-auto rtl:ml-0 rtl:mr-auto': position === 'left' },
        'hidden md:self-center md:flex items-center md:mb-0 fixed w-full md:w-auto md:static justify-end left-0 rtl:left-auto rtl:right-0 bottom-0 p-3 md:p-0 md:justify-self-end',
      ]}
    >
      <div class="items-center flex justify-between w-full md:w-auto">
        {
          actions?.length
            ? (
              <span class="ml-4 rtl:ml-0 rtl:mr-4">
                {actions.map((btnProps) => (
                  <Button {...btnProps} class="ml-2 py-2.5 px-5.5 md:px-6 font-semibold shadow-none text-sm w-auto" />
                ))}
              </span>
            )
            : ''
        }
      </div>
    </div>
  </div>

  <style>
    /* Animated underline for active TOP-LEVEL items only */
    .aw-nav > ul > li > a.aw-link-active,
    .aw-nav > ul > li > button.aw-link-active {
      position: relative;
    }
    .aw-nav > ul > li > a.aw-link-active::after,
    .aw-nav > ul > li > button.aw-link-active::after {
      content: "";
      position: absolute;
      left: 1rem;   /* align with px-4 */
      right: 1rem;
      bottom: 0.45rem;  /* tweak to taste */
      height: 2px;
      background: currentColor;
      border-radius: 2px;
      transform-origin: center;
      animation: nav-underline .2s ease;
    }
    @keyframes nav-underline {
      from { transform: scaleX(0); }
      to   { transform: scaleX(1); }
    }
  </style>
</header>
