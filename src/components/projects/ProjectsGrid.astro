---
import type { CollectionEntry } from 'astro:content';
import ProjectCard from './ProjectCard.astro';

interface Props {
  items: CollectionEntry<'projects'>[];
  previewCount?: number;
}
const { items } = Astro.props as Props;
---

<!-- ProjectGrid.astro -->
<section
  id="projects"
  class="masonry-grid grid gap-6 sm:gap-7 lg:gap-8
         grid-cols-1 sm:grid-cols-2 lg:grid-cols-3"
>
  {items.map((p) => (
    <article class="grid-item">
      <div class="grid-item-content">
        <!-- Your existing ProjectCard markup goes here -->
        <ProjectCard project={p} />
      </div>
    </article>
  ))}
</section>

<script is:inline>
  // Masonry with CSS Grid row-span trick
  const grid = document.currentScript?.previousElementSibling;

  if (grid) {
    const gap = parseInt(getComputedStyle(grid).gap) || 0;
    const row = parseInt(getComputedStyle(grid).getPropertyValue('--masonry-row') || '8'); // px

    const size = (item) => {
      const content = item.querySelector('.grid-item-content') || item;
      const h = content.getBoundingClientRect().height;
      const span = Math.ceil((h + gap) / (row + gap));
      item.style.gridRowEnd = `span ${span}`;
    };

    const all = () => grid.querySelectorAll('.grid-item').forEach(size);

    // Recompute on load/resize and when items change size
    const ro = new ResizeObserver(() => all());
    grid.querySelectorAll('.grid-item-content').forEach((el) => ro.observe(el));

    window.addEventListener('load', all);
    window.addEventListener('resize', all);
    all();
  }
</script>
